// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuestionService.Data;

namespace QuestionService.NpgsqlMigrations.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20220121154504_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("QuestionService.Data.Models.Answers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("answer");

                    b.Property<bool>("Correct")
                        .HasColumnType("boolean")
                        .HasColumnName("correct");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("questionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("QuestionService.Data.Models.GameInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ExternalGlobalId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("externalGlobalId");

                    b.Property<string>("OpentDbSessionToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("opentDbSessionToken");

                    b.HasKey("Id");

                    b.ToTable("GameInstances");
                });

            modelBuilder.Entity("QuestionService.Data.Models.GameSessionQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("GameInstanceId")
                        .HasColumnType("integer")
                        .HasColumnName("gameInstanceId");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("questionId");

                    b.HasKey("Id");

                    b.HasIndex("GameInstanceId");

                    b.HasIndex("QuestionId");

                    b.ToTable("GameSessionQuestions");
                });

            modelBuilder.Entity("QuestionService.Data.Models.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Category")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category");

                    b.Property<string>("Difficulty")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("difficulty");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isVerified");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("question");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("submittedAt");

                    b.Property<string>("SubmittedByUsername")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("submittedByUsername");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("verifiedAt");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuestionService.Data.Models.Answers", b =>
                {
                    b.HasOne("QuestionService.Data.Models.Questions", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK__Answers__questio__5DCAEF64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuestionService.Data.Models.GameSessionQuestions", b =>
                {
                    b.HasOne("QuestionService.Data.Models.GameInstance", "GameInstance")
                        .WithMany("GameSessionQuestions")
                        .HasForeignKey("GameInstanceId")
                        .HasConstraintName("FK__GameSessQues__game__5EBF139D")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestionService.Data.Models.Questions", "Question")
                        .WithMany("GameSessionQuestions")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK__GameSessQues__quest__5FB337D6")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameInstance");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuestionService.Data.Models.GameInstance", b =>
                {
                    b.Navigation("GameSessionQuestions");
                });

            modelBuilder.Entity("QuestionService.Data.Models.Questions", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("GameSessionQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
